@inject ISyncLocalStorageService LocalStorage
@inject ICartService CartService 
@inject IProductService productService
@implements IDisposable
<BlazoredTypeahead SearchMethod="@Searchproduct" @bind-Value="selectedProduct" >
    <SelectedTemplate>
        @context.Title 
    </SelectedTemplate>
    <ResultTemplate>
        @context.Title
    </ResultTemplate>
    <NotFoundTemplate>
        Sorry, there were any Products found.
    </NotFoundTemplate>
</BlazoredTypeahead>
<a href="cart" class=" btn btn-info ">
    <i class=" = oi oi-cart"></i>
   Cart 
   <span class="badge badge-pill badge-light">@GetProductCount()</span>
</a>

@code {
    private Product selectedProduct;
    protected override void OnInitialized()
    {
        CartService.OnChange += StateHasChanged; 
    }
    public void Dispose()
    {
        CartService.OnChange -= StateHasChanged;
    }
    private int GetProductCount()
    {
        var cart =   LocalStorage.GetItem<List<ProductVariant>>("cart");
        return cart != null ? cart.Count : 0;
    }
    private async Task<IEnumerable<Product>> Searchproduct(string searchText)
    {
        var response = await productService.SearchProducts(searchText);
        return response;
    }

}
